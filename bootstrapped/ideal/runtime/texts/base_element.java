// Autogenerated from isource/runtime/texts/base_element.i

package ideal.runtime.texts;

import ideal.library.elements.*;
import ideal.library.texts.*;
import ideal.runtime.elements.*;
import ideal.library.channels.output;

import javax.annotation.Nullable;

public class base_element extends debuggable implements text_element {
  private final text_id id;
  private final immutable_list<text_node> the_children;
  public base_element(final text_id id) {
    this.id = id;
    this.the_children = new empty<text_node>();
  }
  public base_element(final text_id id, final @Nullable readonly_list<text_node> the_children) {
    this.id = id;
    this.the_children = the_children != null ? the_children.frozen_copy() : new empty<text_node>();
  }
  public static text_element make(final text_id id, final @Nullable text_fragment fragment) {
    return new base_element(id, text_util.to_list(fragment));
  }
  public static text_element make(final element_id id, final attribute_id attr, final string value, final @Nullable text_fragment fragment) {
    final base_list<text_node> children = new base_list<text_node>();
    children.append(new base_element(attr, new base_list<text_node>((base_string) value)));
    children.append_all(text_util.to_list(fragment));
    return new base_element(id, children);
  }
  public @Override text_id get_id() {
    return id;
  }
  public @Override immutable_list<text_node> children() {
    return the_children;
  }
  public @Override string to_string() {
    return ideal.machine.elements.runtime_util.concatenate(ideal.machine.elements.runtime_util.concatenate(new base_string("<"), id.to_string()), new base_string(" ...>"));
  }
}
